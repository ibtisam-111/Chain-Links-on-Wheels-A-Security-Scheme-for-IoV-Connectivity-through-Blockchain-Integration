#include "contiki.h"
#include "net/ipv6/simple-udp.h"
#include "sys/log.h"
#include <stdio.h>

#define LOG_MODULE "IoV Simulation"
#define LOG_LEVEL LOG_LEVEL_INFO

// Define the UDP ports for communication
#define UDP_CLIENT_PORT 8765
#define UDP_SERVER_PORT 5678

static struct simple_udp_connection udp_connection;

PROCESS(iov_simulation_process, "IoV Simulation Process");
AUTOSTART_PROCESSES(&iov_simulation_process);

PROCESS_THREAD(iov_simulation_process, ev, data)
{
  static struct etimer timer;
  static char packet_buffer[32]; // Adjust buffer size as needed

  PROCESS_BEGIN();

  // Initialize the UDP connection
  simple_udp_register(&udp_connection, UDP_CLIENT_PORT, NULL,
                      UDP_SERVER_PORT, NULL);

  // Main simulation loop
  while (1)
  {
    // Simulate data from devices to the miner
    LOG_INFO("Sending packet from devices to the miner\n");
    snprintf(packet_buffer, sizeof(packet_buffer), "Packet from devices to miner");
    simple_udp_sendto(&udp_connection, packet_buffer, strlen(packet_buffer),
                      "miners_ipv6_address");

    // Simulate data from the miner to the cloud
    LOG_INFO("Sending packet from miner to the cloud\n");
    snprintf(packet_buffer, sizeof(packet_buffer), "Packet from miner to cloud");
    simple_udp_sendto(&udp_connection, packet_buffer, strlen(packet_buffer),
                      "clouds_ipv6_address");

    // Simulate data from the cloud to the miner
    LOG_INFO("Sending packet from cloud to the miner\n");
    snprintf(packet_buffer, sizeof(packet_buffer), "Packet from cloud to miner");
    simple_udp_sendto(&udp_connection, packet_buffer, strlen(packet_buffer),
                      "miners_ipv6_address");

    // Adjust the timer to wait for 2 seconds before next transmission
    etimer_set(&timer, CLOCK_SECOND * 2);
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&timer));
  }

  PROCESS_END();
}
